import UIKit

struct ExportManager {
    static let canvasSize = CGSize(width: 1890, height: 1260) // 4R 1:1 Í∏∞Ï§Ä
    static let boxSize = CGSize(width: 685, height: 1063)     // 58x90mm @32.5pt/mm
    static let boxSpacing: CGFloat = 30                       // ÏïΩ 3mm Í∞ÑÍ≤©
    static let cornerRadius: CGFloat = 30                     // 3mm ÎùºÏö¥Îî©

    /// üì∏ Ï∫°Ï≤ò Ïù¥ÎØ∏ÏßÄ Ï†ÄÏû• (ÏÇ¨ÏßÑ Ïï±)
    static func saveToPhotos(_ image: UIImage?) {
        guard let image = image else {
            print("‚ùó Ï†ÄÏû• Ïã§Ìå®: Î†åÎçîÎßÅÎêú Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏóÜÏäµÎãàÎã§.")
            return
        }
        UIImageWriteToSavedPhotosAlbum(image, nil, nil, nil)
        print("‚úÖ ÏÇ¨ÏßÑ Ïï±Ïóê Ï†ÄÏû• ÏôÑÎ£å")
    }

    /// üñ® Îëê Ìè¨ÌÜ†Î∞ïÏä§ Î≥ëÌï© Î†åÎçîÎßÅ
    static func renderCombinedImage(photo1: PhotoState, photo2: PhotoState) -> UIImage {
        let renderer = UIGraphicsImageRenderer(size: canvasSize)

        return renderer.image { context in
            let ctx = context.cgContext
            ctx.setFillColor(UIColor.white.cgColor)
            ctx.fill(CGRect(origin: .zero, size: canvasSize))

            drawPhoto(photo1, in: ctx, atIndex: 0)
            drawPhoto(photo2, in: ctx, atIndex: 1)
        }
    }

    /// üß© Ìè¨ÌÜ†Î∞ïÏä§Î≥Ñ Î†åÎçîÎßÅ Ï≤òÎ¶¨
    private static func drawPhoto(_ photo: PhotoState, in ctx: CGContext, atIndex index: Int) {
        guard let image = photo.originalImage else { return }

        // Í∞Å Ìè¨ÌÜ†Î∞ïÏä§ ÏúÑÏπò Í≥ÑÏÇ∞
        let totalWidth = boxSize.width * 2 + boxSpacing
        let groupOriginX = (canvasSize.width - totalWidth) / 2
        let originX = groupOriginX + CGFloat(index) * (boxSize.width + boxSpacing)
        let originY = (canvasSize.height - boxSize.height) / 2
        let boxRect = CGRect(origin: CGPoint(x: originX, y: originY), size: boxSize)

        // Ïä§ÏºÄÏùº Î∞è Ïò§ÌîÑÏÖã Ï†ÅÏö©
        let totalScale = photo.coverScale * photo.scale
        let scaledSize = CGSize(
            width: image.size.width * totalScale,
            height: image.size.height * totalScale
        )

        let drawOrigin = CGPoint(
            x: boxRect.midX - scaledSize.width / 2 + photo.offset.width,
            y: boxRect.midY - scaledSize.height / 2 + photo.offset.height
        )
        let drawRect = CGRect(origin: drawOrigin, size: scaledSize)

        // ÎßàÏä§ÌÇπ Î∞è Í∑∏Î¶¨Í∏∞
        ctx.saveGState()
        let path = UIBezierPath(roundedRect: boxRect, cornerRadius: cornerRadius).cgPath
        ctx.addPath(path)
        ctx.clip()
        image.draw(in: drawRect)
        ctx.restoreGState()

        // ÎîîÎ≤ÑÍπÖ Î°úÍ∑∏
        print("[DEBUG] drawPhoto(index: \(index))")
        print("  imageSize: \(image.size)")
        print("  coverScale: \(photo.coverScale), scale: \(photo.scale)")
        print("  offset: \(photo.offset)")
        print("  boxRect: \(boxRect)")
        print("  drawRect: \(drawRect)")
    }
}
