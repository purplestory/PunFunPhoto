import SwiftUI
import UniformTypeIdentifiers
import ZipArchive

struct FileOpenTestView: View {
    @EnvironmentObject var appState: AppState
    @Environment(\.dismiss) var dismiss
    @ObservedObject var photo1: PhotoState
    @ObservedObject var photo2: PhotoState
    @State private var isImporterPresented = false
    @State private var alertMessage: String?
    @State private var showAlert = false
    @State private var showToast = false
    @State private var toastMessage: String = ""
    @State private var toastType: CenterToastView.AlertType = .success
    
    var body: some View {
        VStack(spacing: 20) {
            Button("📂 pfp 파일 수동 열기") {
                isImporterPresented = true
            }
        }
        .fileImporter(
            isPresented: $isImporterPresented,
            allowedContentTypes: [UTType.punfunProject],
            allowsMultipleSelection: false
        ) { result in
            switch result {
            case .success(let urls):
                if let url = urls.first {
                    print("✅ 선택된 파일:", url)
                    Task {
                        await loadProjectManually(from: url)
                    }
                } else {
                    presentAlert(message: "선택된 파일이 없습니다.", type: .warning)
                }
            case .failure(let error):
                presentAlert(message: "파일 가져오기 실패: \(error.localizedDescription)", type: .error)
            }
        }
    }
    
    private func presentAlert(message: String, type: CenterToastView.AlertType = .error) {
        toastMessage = message
        toastType = type
        withAnimation {
            showToast = true
        }
        DispatchQueue.main.asyncAfter(deadline: .now() + 1.8) {
            withAnimation {
                showToast = false
            }
        }
    }
    
    @MainActor
    func loadProjectManually(from url: URL) async {
        let fileManager = FileManager.default
        let tempDir = fileManager.temporaryDirectory
        let unzipFolder = tempDir.appendingPathComponent(UUID().uuidString, isDirectory: true)
        
        do {
            print("📂 복원 시작: \(url.lastPathComponent)")
            
            // 임시 디렉토리 생성
            try fileManager.createDirectory(at: unzipFolder, withIntermediateDirectories: true)
            
            // 보안 접근 시작
            let didStartScopedAccess = url.startAccessingSecurityScopedResource()
            defer {
                if didStartScopedAccess {
                    url.stopAccessingSecurityScopedResource()
                    print("🔓 보안 접근 해제됨")
                }
            }
            
            // 압축 해제 시도
            print("📦 압축 해제 시작...")
            let success = SSZipArchive.unzipFile(atPath: url.path, toDestination: unzipFolder.path)
            if !success {
                print("⚠️ SSZipArchive 압축 해제 결과: 실패")
                // 파일 존재 여부 및 권한 확인
                print("📄 파일 존재 여부: \(fileManager.fileExists(atPath: url.path))")
                if let attributes = try? fileManager.attributesOfItem(atPath: url.path) {
                    print("📄 파일 속성:", attributes)
                }
                throw NSError(domain: "PunFun", code: 1, userInfo: [NSLocalizedDescriptionKey: "프로젝트 파일 압축 해제 실패"])
            }
            
            print("✅ 압축 해제 완료")
            
            // 메타데이터 로드
            let metaURL = unzipFolder.appendingPathComponent("meta.json")
            guard fileManager.fileExists(atPath: metaURL.path) else {
                throw NSError(domain: "PunFun", code: 2, userInfo: [NSLocalizedDescriptionKey: "메타데이터 파일을 찾을 수 없습니다."])
            }
            
            print("📖 메타데이터 로드 중...")
            let metaData = try Data(contentsOf: metaURL)
            let project = try JSONDecoder().decode(PunFunPhotoSaveData.self, from: metaData)
            print("✅ 메타데이터 로드 완료")
            
            // 이미지 파일 확인 및 로드
            let path1 = unzipFolder.appendingPathComponent(project.photo1.filePath)
            let path2 = unzipFolder.appendingPathComponent(project.photo2.filePath)
            
            guard fileManager.fileExists(atPath: path1.path),
                  fileManager.fileExists(atPath: path2.path) else {
                throw NSError(domain: "PunFun", code: 3, userInfo: [NSLocalizedDescriptionKey: "이미지 파일을 찾을 수 없습니다."])
            }
            
            print("🖼 이미지 파일 로드 중...")
            guard let image1 = UIImage(contentsOfFile: path1.path),
                  let image2 = UIImage(contentsOfFile: path2.path) else {
                throw NSError(domain: "PunFun", code: 4, userInfo: [NSLocalizedDescriptionKey: "이미지 로드 실패"])
            }
            print("✅ 이미지 파일 로드 완료")
            
            // 상태 업데이트
            print("💾 상태 업데이트 중...")
            photo1.originalImage = image1
            photo1.offset = CGSize(width: project.photo1.offset.x, height: project.photo1.offset.y)
            photo1.scale = project.photo1.scale
            photo1.coverScale = project.photo1.coverScale
            
            photo2.originalImage = image2
            photo2.offset = CGSize(width: project.photo2.offset.x, height: project.photo2.offset.y)
            photo2.scale = project.photo2.scale
            photo2.coverScale = project.photo2.coverScale
            
            // 현재 프로젝트 URL 업데이트
            appState.currentProjectURL = url
            print("✅ 상태 업데이트 완료")
            
            // 성공 메시지 표시
            presentAlert(message: "프로젝트를 성공적으로 불러왔습니다.")
            
            // 지연 후 뷰 닫기
            try? await Task.sleep(nanoseconds: 1_500_000_000) // 1.5초 대기
            dismiss()
            
        } catch {
            print("❌ 복원 실패:", error.localizedDescription)
            presentAlert(message: "프로젝트 복원 실패: \(error.localizedDescription)", type: .error)
        }
        
        // 임시 폴더 정리
        do {
            try fileManager.removeItem(at: unzipFolder)
            print("🧹 임시 폴더 정리 완료")
        } catch {
            print("⚠️ 임시 폴더 정리 실패:", error.localizedDescription)
        }
    }
    // 프리뷰용
    struct FileOpenTestView_Previews: PreviewProvider {
        static var previews: some View {
            FileOpenTestView(
                photo1: PhotoState(),
                photo2: PhotoState()
            )
            .environmentObject(AppState())
        }
    }
}

